// Code generated by MockGen. DO NOT EDIT.
// Source: go.etcd.io/etcd/client (interfaces: KeysAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	client "go.etcd.io/etcd/client"
	reflect "reflect"
)

// MockKeysAPI is a mock of KeysAPI interface
type MockKeysAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKeysAPIMockRecorder
}

// MockKeysAPIMockRecorder is the mock recorder for MockKeysAPI
type MockKeysAPIMockRecorder struct {
	mock *MockKeysAPI
}

// NewMockKeysAPI creates a new mock instance
func NewMockKeysAPI(ctrl *gomock.Controller) *MockKeysAPI {
	mock := &MockKeysAPI{ctrl: ctrl}
	mock.recorder = &MockKeysAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeysAPI) EXPECT() *MockKeysAPIMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockKeysAPI) Create(arg0 context.Context, arg1, arg2 string) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKeysAPIMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeysAPI)(nil).Create), arg0, arg1, arg2)
}

// CreateInOrder mocks base method
func (m *MockKeysAPI) CreateInOrder(arg0 context.Context, arg1, arg2 string, arg3 *client.CreateInOrderOptions) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInOrder indicates an expected call of CreateInOrder
func (mr *MockKeysAPIMockRecorder) CreateInOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInOrder", reflect.TypeOf((*MockKeysAPI)(nil).CreateInOrder), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockKeysAPI) Delete(arg0 context.Context, arg1 string, arg2 *client.DeleteOptions) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockKeysAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeysAPI)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockKeysAPI) Get(arg0 context.Context, arg1 string, arg2 *client.GetOptions) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeysAPIMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeysAPI)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method
func (m *MockKeysAPI) Set(arg0 context.Context, arg1, arg2 string, arg3 *client.SetOptions) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockKeysAPIMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeysAPI)(nil).Set), arg0, arg1, arg2, arg3)
}

// Update mocks base method
func (m *MockKeysAPI) Update(arg0 context.Context, arg1, arg2 string) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockKeysAPIMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeysAPI)(nil).Update), arg0, arg1, arg2)
}

// Watcher mocks base method
func (m *MockKeysAPI) Watcher(arg0 string, arg1 *client.WatcherOptions) client.Watcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watcher", arg0, arg1)
	ret0, _ := ret[0].(client.Watcher)
	return ret0
}

// Watcher indicates an expected call of Watcher
func (mr *MockKeysAPIMockRecorder) Watcher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watcher", reflect.TypeOf((*MockKeysAPI)(nil).Watcher), arg0, arg1)
}
