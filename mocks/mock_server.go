// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Trojan295/chinchilla/server (interfaces: AgentStore,GameserverStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	server "github.com/Trojan295/chinchilla/server"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAgentStore is a mock of AgentStore interface
type MockAgentStore struct {
	ctrl     *gomock.Controller
	recorder *MockAgentStoreMockRecorder
}

// MockAgentStoreMockRecorder is the mock recorder for MockAgentStore
type MockAgentStoreMockRecorder struct {
	mock *MockAgentStore
}

// NewMockAgentStore creates a new mock instance
func NewMockAgentStore(ctrl *gomock.Controller) *MockAgentStore {
	mock := &MockAgentStore{ctrl: ctrl}
	mock.recorder = &MockAgentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentStore) EXPECT() *MockAgentStoreMockRecorder {
	return m.recorder
}

// GetAgent mocks base method
func (m *MockAgentStore) GetAgent(arg0 string) (*server.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", arg0)
	ret0, _ := ret[0].(*server.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent
func (mr *MockAgentStoreMockRecorder) GetAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockAgentStore)(nil).GetAgent), arg0)
}

// ListAgents mocks base method
func (m *MockAgentStore) ListAgents() ([]server.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents")
	ret0, _ := ret[0].([]server.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents
func (mr *MockAgentStoreMockRecorder) ListAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockAgentStore)(nil).ListAgents))
}

// RegisterAgent mocks base method
func (m *MockAgentStore) RegisterAgent(arg0 *server.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgent indicates an expected call of RegisterAgent
func (mr *MockAgentStoreMockRecorder) RegisterAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockAgentStore)(nil).RegisterAgent), arg0)
}

// MockGameserverStore is a mock of GameserverStore interface
type MockGameserverStore struct {
	ctrl     *gomock.Controller
	recorder *MockGameserverStoreMockRecorder
}

// MockGameserverStoreMockRecorder is the mock recorder for MockGameserverStore
type MockGameserverStoreMockRecorder struct {
	mock *MockGameserverStore
}

// NewMockGameserverStore creates a new mock instance
func NewMockGameserverStore(ctrl *gomock.Controller) *MockGameserverStore {
	mock := &MockGameserverStore{ctrl: ctrl}
	mock.recorder = &MockGameserverStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameserverStore) EXPECT() *MockGameserverStoreMockRecorder {
	return m.recorder
}

// CreateGameserver mocks base method
func (m *MockGameserverStore) CreateGameserver(arg0 *server.Gameserver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGameserver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGameserver indicates an expected call of CreateGameserver
func (mr *MockGameserverStoreMockRecorder) CreateGameserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGameserver", reflect.TypeOf((*MockGameserverStore)(nil).CreateGameserver), arg0)
}

// DeleteGameserver mocks base method
func (m *MockGameserverStore) DeleteGameserver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameserver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGameserver indicates an expected call of DeleteGameserver
func (mr *MockGameserverStoreMockRecorder) DeleteGameserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameserver", reflect.TypeOf((*MockGameserverStore)(nil).DeleteGameserver), arg0)
}

// GetGameserver mocks base method
func (m *MockGameserverStore) GetGameserver(arg0 string) (*server.Gameserver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameserver", arg0)
	ret0, _ := ret[0].(*server.Gameserver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameserver indicates an expected call of GetGameserver
func (mr *MockGameserverStoreMockRecorder) GetGameserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameserver", reflect.TypeOf((*MockGameserverStore)(nil).GetGameserver), arg0)
}

// ListGameservers mocks base method
func (m *MockGameserverStore) ListGameservers() ([]server.Gameserver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGameservers")
	ret0, _ := ret[0].([]server.Gameserver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGameservers indicates an expected call of ListGameservers
func (mr *MockGameserverStoreMockRecorder) ListGameservers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGameservers", reflect.TypeOf((*MockGameserverStore)(nil).ListGameservers))
}

// UpdateGameserver mocks base method
func (m *MockGameserverStore) UpdateGameserver(arg0 *server.Gameserver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameserver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameserver indicates an expected call of UpdateGameserver
func (mr *MockGameserverStoreMockRecorder) UpdateGameserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameserver", reflect.TypeOf((*MockGameserverStore)(nil).UpdateGameserver), arg0)
}
